# Alter
Alter <- round(rnorm(100, mean = 25, sd = 2),0)
# Studienfach
Studienfach <- sample(c("Statistik", "Data Science", "Mathe", "Informatik"), 100, replace = TRUE, prob = c(0.35,0.35,0.20,0.10))
# Matheinteresse
Matheinteresse <- rep(0,100)
Matheinteresse[which(Studienfach =="Statistik")] <- sample(1:7, length(which(Studienfach=="Mathe")), replace = TRUE, prob = c(0,0,0,0.1,0.15,0.25,0.5))
Matheinteresse[which(Studienfach =="Data Science")] <- sample(1:7, length(which(Studienfach=="Mathe")), replace = TRUE, prob = c(0,0.05,0.05,0.1,0.2,0.2,0.4))
Matheinteresse[which(Studienfach =="Mathe")] <- sample(1:7, length(which(Studienfach=="Mathe")), replace = TRUE, prob = c(0,0,0,0.1,0.1,0.2,0.6))
Matheinteresse[which(Studienfach =="Informatik")] <- sample(1:7, length(which(Studienfach=="Mathe")), replace = TRUE, prob = c(0.05,0.1,0.1,0.1,0.1,0.15,0.4))
# Programmierinteresse
Programmierinteresse <- rep(0,100)
Programmierinteresse[which(Studienfach =="Statistik")] <- sample(1:7, length(which(Studienfach=="Mathe")), replace = TRUE, prob = c(0,0,0.05,0.1,0.15,0.3,0.4))
Programmierinteresse[which(Studienfach =="Data Science")] <- sample(1:7, length(which(Studienfach=="Mathe")), replace = TRUE, prob = c(0,0,0,0.1,0.1,0.3,0.5))
Programmierinteresse[which(Studienfach =="Mathe")] <- sample(1:7, length(which(Studienfach=="Mathe")), replace = TRUE, prob = c(0.5,0.05,0.1,0.1,0.2,0.2,0.3))
Programmierinteresse[which(Studienfach =="Informatik")] <- sample(1:7, length(which(Studienfach=="Mathe")), replace = TRUE, prob = c(0,0,0,0.05,0.1,0.25,0.6))
# MatheLK
MatheLK <- sample(c("ja","nein"), 100, replace=TRUE, prob = c(0.75,0.25))
Daten <- data.frame(Alter,MatheLK,Matheinteresse,Programmierinteresse, Studienfach)
write.csv2(Daten, file = "./Datensatz_Aufgabe1.csv")
# Environment leeren
rm(list = ls())
# 00a PACKAGES LADEN -----------------------------------------------------------
library(dplyr)
library(readr)
library(reshape)
library(ggplot2)  # plotten
library(qqplotr)  # Ergaenzung zu qq Plot
library(svglite)
library(ggpmisc)  # Minima und Maxima finden
library(Rmisc )   # Konfidentintervall
library(tibble)   # Datenstruktur
# 00c EINBINDEN DES R-HELPER-SKRIPTES & SKRIPT A -------------------------------
# Dieses Skript enthaelt Helferfunktionen. Folgende Funktionen sind enthalten: #
# Funktion 1: Abfrage und ggf Umwandlung Dataframe                             #
# Funktion 2: Umwandlung von Variablen in numerische Variablen                 #
# Ladend des Helfer-Skriptes
source("./Aufgabe2_RHelperSkript.R")
# Ladend des Skriptes-A
source("./Aufgabe2_SkriptA.R")
# 00b DATEN LADEN --------------------------------------------------------------
# Einlesen der Daten (als data.frame)
daten <- read.csv2(file = "./Datensatz_Aufgabe1.csv")
# Ueberpruefen, ob Daten als DataFrame vorliegen, und wenn nicht Umwandlung in ein
# solches mit Hilde einer FUnktion aus dem R-Helper-Skript
CheckDataFrame(daten)
# 01 DESKRIPTION DER DATEN -----------------------------------------------------
# 01a BETRACHTUNG LAGE ANHAND VON MEDIAN, MITTELWERT UND MODALWERT -------------
calculate_metrParam(daten)
View(ergebnis)
View(ergebnis)
Param_mean <- ergebnis[["mean"]]
Param_med <- ergebnis[["med"]]
Param_mod <- ergebnis[["mod"]]
Param_mod <- ergebnis[["modal"]]
rm(list = ls())
# 00a PACKAGES LADEN -----------------------------------------------------------
library(dplyr)
library(readr)
library(reshape)
library(ggplot2)  # plotten
library(qqplotr)  # Ergaenzung zu qq Plot
library(svglite)
library(ggpmisc)  # Minima und Maxima finden
library(Rmisc )   # Konfidentintervall
# 00b DATEN LADEN --------------------------------------------------------------
# Einlesen der Daten (als data.frame)
# TODO: relativen Pfad anlegen
source("Aufgabe2_RHelperSkript.R")
# daten <- read_csv(file = "\\Datensatz_Aufgabe1.csv")
library(readr)
# daten <- read_csv(file = "./Datensatz_Aufgabe1.csv")
Datensatz_Aufgabe1 <- read_delim("Datensatz_Aufgabe1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
daten <- Datensatz_Aufgabe1
Daten <- Datensatz_Aufgabe1
# 01 DESKRIPTIVE STATISTIK - metr. Variablen -----------------------------------
# Eine Funktion, die verschiedene geeignete deskriptive Statistiken            #
# fuer metrische Variablen berechnet und ausgibt                               #
# 01a UNTERFUNKTIONEN ----------------------------------------------------------
# Arithmetisches Mittel
calculate_mean <-function(x){
mean(x)
}
# Median
calculate_median <- function(x){
median(x)
}
# Maximum
calculate_max <- function(x){
max(x)
}
# Minimum
calculate_min <- function(x){
min(x)
}
# 1. Qartil
calculate_firstQ <- function(x){
quantile(x, 0.25)
}
# 3. Quartil
calculate_thirdQ <- function(x){
quantile(x, 0.75)
}
# Modalwert
calculate_mod <- function(x){
Mode(x)
}
# Spannweite
calculate_range <- function(x){
range(x)
}
# Interquartilsabstand
calculate_iqr <- function(x){
IQR(x)
}
# Mean Absolute Devaition
calculate_mad <- function(x){
mad(x)
}
# Varianz
calculate_var <- function(x){
var(x)
}
# Standardabweichung
calculate_sd <- function(x){
sd(x)
}
# 01b HAUPTFUNKTION ------------------------------------------------------------
calculate_metrParam <- function(daten){
cal_mean <- calculate_mean(daten$Alter)       # arithm Mittel
cal_med <- calculate_median(daten$Alter)      # Median
cal_max <- calculate_max(daten$Alter)         # Maximum
cal_min <- calculate_min(daten$Alter)         # Minimum
cal_fristQ <- calculate_firstQ(daten$Alter)   # Erstes Quartil
cal_thirdQ <- calculate_thirdQ(daten$Alter)   # Drittes Quartil
cal_mod <- calculate_mod(daten$Alter)         # Modalwert
cal_range <- calculate_range(daten$Alter)     # Spannweite
cal_irq <- calculate_iqr(daten$Alter)         # Interquartilsabstand
cal_mad <- calculate_mad(daten$Alter)         # Mean Absolute Deviation
cal_var <- calculate_var(daten$Alter)         # Varianz
cal_sd <- calculate_sd(daten$Alter)           # Standardabweichung
# Erzeugen einer Liste, die dann ausgegeben werden soll
result <- list(mean = cal_mean,
med = cal_med,
max = cal_max,
min = cal_min,
firstQuartil = cal_fristQ,
thirdQuartil = cal_thirdQ,
modal = cal_mod,
range = cal_range,
irq = cal_irq,
mad = cal_mad,
varianz = cal_var,
sdt = cal_sd)
# Ausgabe aller Ergebnisse dieser Funktion als Liste
return(result)
}
# Aufruf und Ausgabe der Funktion calculate_metrParam
metrParam <- calculate_metrParam(daten)
print(metrParam)
calculate_mean <-function(x){
mean(x)
}
# Median
calculate_median <- function(x){
median(x)
}
# Maximum
calculate_max <- function(x){
max(x)
}
# Minimum
calculate_min <- function(x){
min(x)
}
# 1. Qartil
calculate_firstQ <- function(x){
quantile(x, 0.25)
}
# 3. Quartil
calculate_thirdQ <- function(x){
quantile(x, 0.75)
}
# Modalwert
calculate_mod <- function(x){
modal <- unique(x)
modal[which.max(tabulate(match(x, modal)))]
}
# Spannweite
calculate_range <- function(x){
range(x)
}
# Interquartilsabstand
calculate_iqr <- function(x){
IQR(x)
}
# Mean Absolute Devaition
calculate_mad <- function(x){
mad(x)
}
# Varianz
calculate_var <- function(x){
var(x)
}
# Standardabweichung
calculate_sd <- function(x){
sd(x)
}
# 01b HAUPTFUNKTION ------------------------------------------------------------
calculate_metrParam <- function(daten){
cal_mean <- calculate_mean(daten$Alter)       # arithm Mittel
cal_med <- calculate_median(daten$Alter)      # Median
cal_max <- calculate_max(daten$Alter)         # Maximum
cal_min <- calculate_min(daten$Alter)         # Minimum
cal_fristQ <- calculate_firstQ(daten$Alter)   # Erstes Quartil
cal_thirdQ <- calculate_thirdQ(daten$Alter)   # Drittes Quartil
cal_mod <- calculate_mod(daten$Alter)         # Modalwert
cal_range <- calculate_range(daten$Alter)     # Spannweite
cal_irq <- calculate_iqr(daten$Alter)         # Interquartilsabstand
cal_mad <- calculate_mad(daten$Alter)         # Mean Absolute Deviation
cal_var <- calculate_var(daten$Alter)         # Varianz
cal_sd <- calculate_sd(daten$Alter)           # Standardabweichung
# Erzeugen einer Liste, die dann ausgegeben werden soll
result <- list(mean = cal_mean,
med = cal_med,
max = cal_max,
min = cal_min,
firstQuartil = cal_fristQ,
thirdQuartil = cal_thirdQ,
modal = cal_mod,
range = cal_range,
irq = cal_irq,
mad = cal_mad,
varianz = cal_var,
sdt = cal_sd)
# Ausgabe aller Ergebnisse dieser Funktion als Liste
return(result)
}
# Aufruf und Ausgabe der Funktion calculate_metrParam
metrParam <- calculate_metrParam(daten)
print(metrParam)
View(metrParam)
rm(list = ls())
# 00a PACKAGES LADEN -----------------------------------------------------------
library(dplyr)
library(readr)
library(reshape)
library(ggplot2)  # plotten
library(qqplotr)  # Ergaenzung zu qq Plot
library(svglite)
library(ggpmisc)  # Minima und Maxima finden
library(Rmisc )   # Konfidentintervall
library(tibble)   # Datenstruktur
# 00c EINBINDEN DES R-HELPER-SKRIPTES & SKRIPT A -------------------------------
# Ladend des Helfer-Skriptes
source("./Aufgabe2_RHelperSkript.R")
# Ladend des Skriptes-A
source("./Aufgabe2_SkriptA.R")
# 00b DATEN LADEN --------------------------------------------------------------
# Einlesen der Daten (als data.frame)
daten <- read.csv2(file = "./Datensatz_Aufgabe1.csv")
# Ueberpruefen, ob Daten als DataFrame vorliegen, und wenn nicht Umwandlung in ein
# solches mit Hilde einer FUnktion aus dem R-Helper-Skript
CheckDataFrame(daten)
# 01 DESKRIPTION DER DATEN -----------------------------------------------------
# 01a BETRACHTUNG LAGE ANHAND VON MEDIAN, MITTELWERT UND MODALWERT -------------
calculate_metrParam(daten)
Param_mean <- ergebnis[["mean"]]
Param_med <- ergebnis[["med"]]
Param_mod <- ergebnis[["modal"]]
calculate_metrParam(daten)
Param_mean <- metrParam[["mean"]]
Param_med <- metrParam[["med"]]
Param_mod <- metrParam[["modal"]]
if(Param_mod < Param_med < Param_mean){
return("Es handelt sich um eine rechtsschiefe Verteilung, da Modalewert: ",
Param_mod, " < Median: ", Param_med, " < Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod > Param_med > Param_mean){
return("Es handelt sich um eine linksschiefe Verteilung, da Modalewert: ",
Param_mod, " > Median: ", Param_med, " > Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod = Param_med = Param_mean){
return("Es handelt sich um eine symmetrische Verteilung, da Modalewert: ",
Param_mod, " = Median: ", Param_med, " = Mittelwert: ", Param_mean, " ist.")
} else{
return("Es kann keine eindeitige Verteilung festgestellt werden.")
}
if(Param_mod < Param_med & Param_med < Param_mean){
return("Es handelt sich um eine rechtsschiefe Verteilung, da Modalewert: ",
Param_mod, " < Median: ", Param_med, " < Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod > Param_med & Param_med > Param_mean){
return("Es handelt sich um eine linksschiefe Verteilung, da Modalewert: ",
Param_mod, " > Median: ", Param_med, " > Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod = Param_med & Param_med = Param_mean){
return("Es handelt sich um eine symmetrische Verteilung, da Modalewert: ",
Param_mod, " = Median: ", Param_med, " = Mittelwert: ", Param_mean, " ist.")
} else{
return("Es kann keine eindeitige Verteilung festgestellt werden.")
}
if(Param_mod < Param_med & Param_med < Param_mean){
return("Es handelt sich um eine rechtsschiefe Verteilung, da Modalewert: ",
Param_mod, " < Median: ", Param_med, " < Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod > Param_med & Param_med > Param_mean){
return("Es handelt sich um eine linksschiefe Verteilung, da Modalewert: ",
Param_mod, " > Median: ", Param_med, " > Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod == Param_med & Param_med == Param_mean){
return("Es handelt sich um eine symmetrische Verteilung, da Modalewert: ",
Param_mod, " = Median: ", Param_med, " = Mittelwert: ", Param_mean, " ist.")
} else{
return("Es kann keine eindeitige Verteilung festgestellt werden.")
}
if(Param_mod < Param_med & Param_med < Param_mean){
return(paste("Es handelt sich um eine rechtsschiefe Verteilung, da Modalewert: ",
Param_mod, " < Median: ", Param_med, " < Mittelwert: ", Param_mean, " ist."))
} else if(Param_mod > Param_med & Param_med > Param_mean){
return(paste("Es handelt sich um eine linksschiefe Verteilung, da Modalewert: ",
Param_mod, " > Median: ", Param_med, " > Mittelwert: ", Param_mean, " ist."))
} else if(Param_mod == Param_med & Param_med == Param_mean){
return(paste("Es handelt sich um eine symmetrische Verteilung, da Modalewert: ",
Param_mod, " = Median: ", Param_med, " = Mittelwert: ", Param_mean, " ist."))
} else{
return(paste("Es kann keine eindeitige Verteilung festgestellt werden."))
}
if(Param_mod < Param_med & Param_med < Param_mean){
print("Es handelt sich um eine rechtsschiefe Verteilung, da Modalewert: ",
Param_mod, " < Median: ", Param_med, " < Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod > Param_med & Param_med > Param_mean){
print("Es handelt sich um eine linksschiefe Verteilung, da Modalewert: ",
Param_mod, " > Median: ", Param_med, " > Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod == Param_med & Param_med == Param_mean){
printe("Es handelt sich um eine symmetrische Verteilung, da Modalewert: ",
Param_mod, " = Median: ", Param_med, " = Mittelwert: ", Param_mean, " ist.")
} else{
print("Es kann keine eindeitige Verteilung festgestellt werden.")
}
if(Param_mod < Param_med & Param_med < Param_mean){
print("Es handelt sich um eine rechtsschiefe Verteilung, da Modalewert: ",
Param_mod, " < Median: ", Param_med, " < Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod > Param_med & Param_med > Param_mean){
print("Es handelt sich um eine linksschiefe Verteilung, da Modalewert: ",
Param_mod, " > Median: ", Param_med, " > Mittelwert: ", Param_mean, " ist.")
} else if(all.equal(Param_mod,Param_med) & all.equal(Param_med,Param_mean)){
printe("Es handelt sich um eine symmetrische Verteilung, da Modalewert: ",
Param_mod, " = Median: ", Param_med, " = Mittelwert: ", Param_mean, " ist.")
} else{
print("Es kann keine eindeitige Verteilung festgestellt werden.")
}
if(Param_mod < Param_med & Param_med < Param_mean){
print("Es handelt sich um eine rechtsschiefe Verteilung, da Modalewert: ",
Param_mod, " < Median: ", Param_med, " < Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod > Param_med & Param_med > Param_mean){
print("Es handelt sich um eine linksschiefe Verteilung, da Modalewert: ",
Param_mod, " > Median: ", Param_med, " > Mittelwert: ", Param_mean, " ist.")
} else if(all.equal(Param_mod,Param_med,Param_mean)){
printe("Es handelt sich um eine symmetrische Verteilung, da Modalewert: ",
Param_mod, " = Median: ", Param_med, " = Mittelwert: ", Param_mean, " ist.")
} else{
print("Es kann keine eindeitige Verteilung festgestellt werden.")
}
if(Param_mod < Param_med & Param_med < Param_mean){
print("Es handelt sich um eine rechtsschiefe Verteilung, da Modalewert: ",
Param_mod, " < Median: ", Param_med, " < Mittelwert: ", Param_mean, " ist.")
} else if(Param_mod > Param_med & Param_med > Param_mean){
print("Es handelt sich um eine linksschiefe Verteilung, da Modalewert: ",
Param_mod, " > Median: ", Param_med, " > Mittelwert: ", Param_mean, " ist.")
} else if(all.equal(Param_mod,Param_med,Param_mean)){
print("Es handelt sich um eine symmetrische Verteilung, da Modalewert: ",
Param_mod, " = Median: ", Param_med, " = Mittelwert: ", Param_mean, " ist.")
} else{
print("Es kann keine eindeitige Verteilung festgestellt werden.")
}
if(Param_mod < Param_med & Param_med < Param_mean){
print(paste0("Es handelt sich um eine rechtsschiefe Verteilung, da Modalewert: ",
Param_mod, " < Median: ", Param_med, " < Mittelwert: ", Param_mean, " ist."))
} else if(Param_mod > Param_med & Param_med > Param_mean){
print(paste0("Es handelt sich um eine linksschiefe Verteilung, da Modalewert: ",
Param_mod, " > Median: ", Param_med, " > Mittelwert: ", Param_mean, " ist."))
} else if(all.equal(Param_mod,Param_med,Param_mean)){
print(paste0("Es handelt sich um eine symmetrische Verteilung, da Modalewert: ",
Param_mod, " = Median: ", Param_med, " = Mittelwert: ", Param_mean, " ist."))
} else{
print("Es kann keine eindeitige Verteilung festgestellt werden.")
}
